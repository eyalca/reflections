What happens when you initialize a repository? Why do you need to do it?
it creates a trackable repository that allows you to commit and checkout previous version of the project

How is the staging area different from the working directory and the repository? What value do you think it offers?
the staging area provide a middle status before commiting a change to the repository. you can control which of the changes will be commited from the working directory

How can you use the staging area to make sure you have one commit per logical change?
the staging area allows you to control the commited files even if you made many changes to the working directory, and still commit only changes that are part of one logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
in cases when you have a working project and you want to experiment a new feature that is work in progress without interferring with the working project

How do the diagrams help you visualize the branch structure?
it illustrated graphically what happens when starting a new branch, checking out on a prevous commit and how to avoid lost checkouts

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
the result is a unified code that takes the progress of separate branches and merge them so the final version is a combination of the most recent version of each branch, and the diagram shows exactly that.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros: it operates a manual logic into an automatic process and pompts you to manually intervene when a conflict ocures
Cons: as it happens in many cases, automatic processes sometimes tend to make mistakes, so it might not always do what you wanted it to do

